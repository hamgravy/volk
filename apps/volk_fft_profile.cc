/* -*- c++ -*- */
/*
 * Copyright 2012-2014 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#include "qa_fft_utils.h"

#include <volk/volk.h>
#include <volk/volk_prefs.h>

#include <ciso646>
#include <vector>
#include <boost/foreach.hpp>
#include <boost/filesystem.hpp>
#include <boost/program_options.hpp>
#include <iostream>
#include <fstream>
#include <sys/stat.h>
#include <sys/types.h>
#define INVERSEFFT true
#define FORWARDFFT false

namespace fs = boost::filesystem;

void write_results(const std::vector<volk_test_results_t> *results)
{
    char path[1024];
    volk_get_fft_config_path(path);
    
    const fs::path config_path(path);
    
    // Until we can update the config on a kernel by kernel basis
    // do not overwrite volk_config when using a regex.
    if (not fs::exists(config_path.branch_path()))
    {
        std::cout << "Creating " << config_path.branch_path() << "..." << std::endl;
        fs::create_directories(config_path.branch_path());
    }
    
    std::cout << "Writing " << config_path << "..." << std::endl;
    std::ofstream config(config_path.string().c_str());
    if(!config.is_open()) { //either we don't have write access or we don't have the dir yet
        std::cout << "Error opening file " << config_path << std::endl;
    }
    
    config << "\
#this file is generated by volk_fft_profile.\n\
#the fft kernel name is followed by the transform direction, size and preferred architecture.\n\
";
    std::string transformdir;    
    BOOST_FOREACH(volk_test_results_t result, *results) {
        transformdir = result.isinverse ? "inverse" : "forward";
        
        config << result.name << " "
            << transformdir << " "
            << result.vlen << " "
            << result.best_arch_a << " "
            << result.best_arch_u << std::endl;
    }
    config.close();
}

void write_json(std::ofstream &json_file, std::vector<volk_test_results_t> results) {
    json_file << "{" << std::endl;
    json_file << " \"volk_tests\": [" << std::endl;
    size_t len = results.size();
    size_t i = 0;
    BOOST_FOREACH(volk_test_results_t &result, results) {
        json_file << "  {" << std::endl;
        json_file << "   \"name\": \"" << result.name << "\"," << std::endl;
        json_file << "   \"vlen\": " << result.vlen << "," << std::endl;
        json_file << "   \"iter\": " << result.iter << "," << std::endl;
        json_file << "   \"best_arch_a\": \"" << result.best_arch_a
            << "\"," << std::endl;
        json_file << "   \"best_arch_u\": \"" << result.best_arch_u
            << "\"," << std::endl;
        json_file << "   \"results\": {" << std::endl;
        size_t results_len = result.results.size();
        size_t ri = 0;
        typedef std::pair<std::string, volk_test_time_t> tpair;
        BOOST_FOREACH(tpair pair, result.results) {
            volk_test_time_t time = pair.second;
            json_file << "    \"" << time.name << "\": {" << std::endl;
            json_file << "     \"name\": \"" << time.name << "\"," << std::endl;
            json_file << "     \"time\": " << time.time << "," << std::endl;
            json_file << "     \"units\": \"" << time.units << "\"" << std::endl;
            json_file << "    }" ;
            if(ri+1 != results_len) {
                json_file << ",";
            }
            json_file << std::endl;
            ri++;
        }
        json_file << "   }" << std::endl;
        json_file << "  }";
        if(i+1 != len) {
            json_file << ",";
        }
        json_file << std::endl;
        i++;
    }
    json_file << " ]" << std::endl;
    json_file << "}" << std::endl;
}

int main(int argc, char *argv[]) {
    // Adding program options
    boost::program_options::options_description desc("Options");
    desc.add_options()
      ("help,h", "Print help messages")
      ("benchmark,b",
            boost::program_options::value<bool>()->default_value( false )
                                                ->implicit_value( true ),
            "Run all kernels (benchmark mode)")
      ("tests-regex,R",
            boost::program_options::value<std::string>(),
            "Run tests matching regular expression.")
      ("json,j",
            boost::program_options::value<std::string>(),
            "JSON output file")
      ;

    // Handle the options that were given
    boost::program_options::variables_map vm;
    bool benchmark_mode;
    std::string kernel_regex;
    bool store_results = true;
    std::ofstream json_file;

    try {
        boost::program_options::store(boost::program_options::parse_command_line(argc, argv, desc), vm);
        boost::program_options::notify(vm);
        benchmark_mode = vm.count("benchmark")?vm["benchmark"].as<bool>():false;
        if ( vm.count("tests-regex" ) ) {
            kernel_regex = vm["tests-regex"].as<std::string>();
            store_results = false;
            std::cout << "Warning: using a regexp will not save results to a config" << std::endl;
        }
        else {
            kernel_regex = ".*";
            store_results = true;
        }
    } catch (boost::program_options::error& error) {
        std::cerr << "Error: " << error.what() << std::endl << std::endl;
        std::cerr << desc << std::endl;
        return 1;
    }
    /** --help option
*/
    if ( vm.count("help") )
    {
      std::cout << "The VOLK profiler." << std::endl
                << desc << std::endl;
      return 0;
    }

    if ( vm.count("json") )
    {
        json_file.open( vm["json"].as<std::string>().c_str() );
    }

    // Run tests
    std::vector<volk_test_results_t> results;
    
    
    const unsigned int points = 33554432*4;
    int iterations;

    /*   
    iterations = 2;    
    VOLK_FFT_PROFILE(volk_32fc_fft_32fc,  5e-5, 0, 96, FORWARDFFT, iterations, &results, benchmark_mode, kernel_regex);
    VOLK_FFT_PROFILE(volk_32fc_fft_32fc,  5e-5, 0, 96, INVERSEFFT, iterations, &results, benchmark_mode, kernel_regex);
    
    VOLK_FFT_PROFILE(volk_32ic_fft_32ic,  128,   0, 128, FORWARDFFT, iterations, &results, benchmark_mode, kernel_regex);
    VOLK_FFT_PROFILE(volk_32ic_fft_32ic,  128,   0, 128, INVERSEFFT, iterations, &results, benchmark_mode, kernel_regex);
    
    VOLK_FFT_PROFILE(volk_16ic_fft_16ic,  32,   0, 128, FORWARDFFT, iterations, &results, benchmark_mode, kernel_regex);
    VOLK_FFT_PROFILE(volk_16ic_fft_16ic,  32,   0, 128, INVERSEFFT, iterations, &results, benchmark_mode, kernel_regex);
    */ 

    const int pow2sizes[12]={16,32,64,128,256,512,1024,2048,4096,8192,16384,32768};
    const int sizes[8]=    {24,36,96,160,192,384,768,1280};

    BOOST_FOREACH(int size, pow2sizes){
        iterations = points/size;
        VOLK_FFT_PROFILE(volk_32fc_fft_32fc,  5e-5, 0, size, FORWARDFFT, iterations, &results, benchmark_mode, kernel_regex);
        VOLK_FFT_PROFILE(volk_32fc_fft_32fc,  5e-5, 0, size, INVERSEFFT, iterations, &results, benchmark_mode, kernel_regex);
                
        VOLK_FFT_PROFILE(volk_32ic_fft_32ic,  128,   0, size, FORWARDFFT, iterations, &results, benchmark_mode, kernel_regex);
        VOLK_FFT_PROFILE(volk_32ic_fft_32ic,  128,   0, size, INVERSEFFT, iterations, &results, benchmark_mode, kernel_regex);
        
        VOLK_FFT_PROFILE(volk_16ic_fft_16ic,  32,   0, size, FORWARDFFT, iterations, &results, benchmark_mode, kernel_regex);
        VOLK_FFT_PROFILE(volk_16ic_fft_16ic,  32,   0, size, INVERSEFFT, iterations, &results, benchmark_mode, kernel_regex);
    } 
    
    BOOST_FOREACH(int size, sizes){
        iterations = points/size;
        VOLK_FFT_PROFILE(volk_32fc_fft_32fc,  5e-5, 0, size, FORWARDFFT, iterations, &results, benchmark_mode, kernel_regex);
        VOLK_FFT_PROFILE(volk_32fc_fft_32fc,  5e-5, 0, size, INVERSEFFT, iterations, &results, benchmark_mode, kernel_regex);
    }

    if(vm.count("json")) {
        write_json(json_file, results);
        json_file.close();
    }

    if(store_results) {
        write_results(&results);
    }
    else {
        std::cout << "Warning: config not generated" << std::endl;
    }
}
